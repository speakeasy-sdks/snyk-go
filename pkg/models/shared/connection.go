// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionIntegrationID string

const (
	ConnectionIntegrationIDSalesforce ConnectionIntegrationID = "salesforce"
	ConnectionIntegrationIDHubspot    ConnectionIntegrationID = "hubspot"
	ConnectionIntegrationIDPipedrive  ConnectionIntegrationID = "pipedrive"
)

func (e ConnectionIntegrationID) ToPointer() *ConnectionIntegrationID {
	return &e
}

func (e *ConnectionIntegrationID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "salesforce":
		fallthrough
	case "hubspot":
		fallthrough
	case "pipedrive":
		*e = ConnectionIntegrationID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionIntegrationID: %v", v)
	}
}

type ConnectionStatus string

const (
	ConnectionStatusNewConnection ConnectionStatus = "NEW_CONNECTION"
	ConnectionStatusInitialSync   ConnectionStatus = "INITIAL_SYNC"
	ConnectionStatusReady         ConnectionStatus = "READY"
)

func (e ConnectionStatus) ToPointer() *ConnectionStatus {
	return &e
}

func (e *ConnectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW_CONNECTION":
		fallthrough
	case "INITIAL_SYNC":
		fallthrough
	case "READY":
		*e = ConnectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionStatus: %v", v)
	}
}

type Connection struct {
	ConnectionID  *string                  `json:"connectionId,omitempty"`
	CreatedTime   *string                  `json:"createdTime,omitempty"`
	IntegrationID *ConnectionIntegrationID `json:"integrationId,omitempty"`
	NativeOrgURL  *string                  `json:"nativeOrgURL,omitempty"`
	Status        *ConnectionStatus        `json:"status,omitempty"`
}
